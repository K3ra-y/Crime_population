isodate <- "([0-9]{4})-([0-1][0-9])-([0-3][0-9])"
re_match(text = dates, pattern = isodate)
isodaten <- "(?<year>[0-9]{4})-(?<month>[0-1][0-9])-(?<day>[0-3][0-9])"
re_match(text = dates, pattern = isodaten)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(tidyverse)
library(gapminder)
library(nycflights13)
library(lubridate)
library(reticulate)
path_to_python <- "C:/Users/Kera/Anaconda3/python.exe"
reticulate::use_python(path_to_python)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(tidyverse)
library(gapminder)
library(nycflights13)
library(lubridate)
#'   * This file lives in a directory synced to DropBox.
#'   * You open the DropBox file at <http://bit.ly/jenny-live-code> and refresh
#'   as needed.
#'   * Should allow you to see, copy, paste everything I've typed and save the
#'   entire transcript at the end. This file is highly perishable, so save your
#'   own copy if you want it.
#'   * Every now and then the refresh won't work. Just re-open from from the
#'   bit.ly link: <http://bit.ly/jenny-live-code>
#'
#+ setup, include = FALSE
knitr::opts_chunk$set(error = TRUE, collapse = TRUE)
#' Look at the README for the micro-package
#' [rematch2](https://github.com/mangothecat/rematch2#readme) thas a nice
#' interface for turning a character vector into a data frame.
#install.packages("rematch2")
library(rematch2)
dates <- c("2016-04-20", "1977-08-08", "not a date", "2016",
"76-03-02", "2012-06-30", "2015-01-21 19:58")
isodate <- "([0-9]{4})-([0-1][0-9])-([0-3][0-9])"
# wrapper around two functions
# first mathes year shows up in first column
# secon column month pirints
# third colum
re_match(text = dates, pattern = isodate)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(tidyverse)
library(gapminder)
library(nycflights13)
library(lubridate)
parse_date_time(x = dates,
orders = c("m d, y", "y-m-d", "d-m-y", "m/d/y"),
locale = "eng")
mdy(d1)
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
mdy(d1)
mdy(d4[1], d4[2])
mdy(d1)
ymd(d2)
dmy(d3)
mdy(d4[1], d4[2])
mdy(d5)
setwd("~/")
install.packages("RSQLite")
#install.packages("RSQLite")
devtools::install_github("rstats-db/RSQLite")
library(DBI)
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(con)
dbWriteTable(con, "flights.db", flights)
citation("tidyverse")
datasets()
?datasets
summary(lm(data = iris, Sepal.Length ~ Sepal.Width))
summary(lm(data = iris, Sepal.Length ~ Species * Sepal.Width))
summary(lm(data = iris, Sepal.Length ~ Sepal.Width))
summary(lm(data = iris, Sepal.Length ~ Species))
summary(lm(data = iris, Sepal.Length ~ Sepal.Width))
summary(lm(data = iris, Sepal.Length ~ Species * Sepal.Width))
lm_model_2 <- lm(mpg ~ disp + hp + wt + drat, data = mtcars)
summary(lm_model_2)
x = 1L
for (i in 1:30) {
x = x * 2L
}
print(x)
x = 1L
for (i in 1:31) {
x = x * 2L
}
print(x)
install.packages("shiny")
library(shiny)
install.packages("installr")
library(installr)
updateR()
updateR()
updateR()
updateR()
library(installr)
updateR()
updateR()
setwd("~/DSCI_532_Data_Visualization_II/Crime_population/script/Crime_App")
dat <- read.csv("../../data/ucr_crime_1975_2015.csv")
str(dat)
#filter out the data that was reported less than 12 months
dat <- dat %>% filter(months_reported == 12)
sum(is.na(dat))
library(shiny)
library(tidyverse)
library(ggplot2)
dat <- read.csv("../../data/ucr_crime_1975_2015.csv")
str(dat)
library(shiny)
#filter out the data that was reported less than 12 months
dat <- dat %>% filter(months_reported == 12)
sum(is.na(dat))
View(dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/DSCI_532_Data_Visualization_II/Crime_population/script/Crime_App")
runApp()
# Define server logic required to draw a histogram
server <- function(input, output) {
crime_filtered <- reactive({
dat %>%
filter(year > input$year_input[1],
year < input$year_input[2])
}
)
}
library(shiny)
library(tidyverse)
library(ggplot2)
dat <- read.csv("../../data/ucr_crime_1975_2015.csv")
str(dat)
library(shiny)
#filter out the data that was reported less than 12 months
dat <- dat %>% filter(months_reported == 12)
sum(is.na(dat))
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Crime Data Visualizer (U.S.)",
windowTitle = "US Crime App"),
# Sidebar select year range
sidebarLayout(
sidebarPanel(
sliderInput("year_input",
"SELECT YEAR",
min = 1975,
max = 2015,
value = c(1975, 2015),
sep = "")
))
)
# Define server logic required to draw a histogram
server <- function(input, output) {
crime_filtered <- reactive({
dat %>%
filter(year > input$year_input[1],
year < input$year_input[2])
}
)
}
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
runApp('~/DSCI_532_Data_Visualization_II/Crime_population/script/App2')
shiny::runApp()
runApp()
runApp()
dat <- read.csv("../../data/ucr_crime_1975_2015.csv")
str(dat)
ggplot(dat, aes_(year, dat$rob_per_100k)) +
geom_line()+
labs(x = "Crime per 100k", y = "Year")
ggplot(dat, aes(year, dat$rob_per_100k)) +
geom_line()+
labs(x = "Crime per 100k", y = "Year")
ggplot(dat, aes_(year, rob_per_100k)) +
geom_line()+
labs(x = "Crime per 100k", y = "Year")
ggplot(dat, aes(year, rob_per_100k)) +
geom_line()+
labs(x = "Crime per 100k", y = "Year")
ggplot(dat, aes(year, rob_per_100k), dat$department_name='Atlanta') +
geom_line()+
labs(y = "Crime per 100k", x = "Year")
ggplot(dat, aes(year, rob_per_100k), department_name='Atlanta') +
geom_line()+
labs(y = "Crime per 100k", x = "Year")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$department_name
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#filter out the data that was reported less than 12 months
dat <- dat %>% filter(months_reported == 12)
sum(is.na(dat))
cities <- unique(dat$department_name)
years <- unique(dat$year)
depart <- head(cities)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dat)
runApp()
runApp()
str(dat)
(dat %>%
gather( key = "crime_type", value = "count_per_100k", violent_per_100k, homs_per_100k, rape_per_100k, rob_per_100k, agg_ass_per_100k))
runApp()
runApp()
dat <- read.csv("../../data/ucr_crime_1975_2015.csv")
str(dat)
library(shiny)
tidy_data <- (dat %>%
gather( key = "crime_type", value = "count_per_100k", violent_per_100k, homs_per_100k, rape_per_100k, rob_per_100k, agg_ass_per_100k))
tidy_data <- tidy_data %>% filter(months_reported == 12)
sum(is.na(tidy_data))
cities <- unique(tidy_data$department_name)
years <- unique(tidy_data$year)
depart <- head(cities)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Crime Data Visualizer (U.S.)",
windowTitle = "US Crime App"),
# Sidebar select year range
sidebarLayout(
sidebarPanel(
selectInput("department_name", "SELECT CITY",
choices = cities,
selected = depart,
multiple = FALSE),
br(),
sliderInput("year_input", "Year",
min = 1975, max = 2015,
value = c(1975, 2015),
sep = ""),
br(),
# select crime type
selectInput("crime_type",
"SELECT CRIME TYPE",
choices =  list("Violance" = "violent_per_100k",
"Homicide" = "homs_per_100k",
"Rape" = "rape_per_100k",
"Robbery" = "rob_per_100k",
"Aggravated Assault" = "agg_ass_per_100k"),
selected = "rape_per_100k")),
mainPanel(
plotOutput("plot_crime")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
crime_filtered <- reactive(
tidy_data %>% filter(department_name ==  input$department_name,
crime_type ==  input$crime_type,
year >= input$year_input[1] &
year <= input$year_input[2])
)
output$plot_crime <- renderPlot(
crime_filtered() %>%
ggplot(aes_(input$year_input,
input$crime_type,
input$department_name)) +
geom_line()+
labs(x = "Year", y = "Crime per 100k")
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
dat <- read.csv("../../data/ucr_crime_1975_2015.csv")
str(dat)
library(shiny)
dat <- tidy_data %>% filter(months_reported == 12)
sum(is.na(dat))
cities <- unique(dat$department_name)
years <- unique(dat$year)
depart <- head(cities)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Crime Data Visualizer (U.S.)",
windowTitle = "US Crime App"),
# Sidebar select year range
sidebarLayout(
sidebarPanel(
selectInput("department_name", "SELECT CITY",
choices = cities,
selected = depart,
multiple = FALSE),
br(),
sliderInput("year_input", "Year",
min = 1975, max = 2015,
value = c(1975, 2015),
sep = ""),
br(),
# select crime type
selectInput("crime_type",
"SELECT CRIME TYPE",
choices =  list("Homicide" = "homs_per_100k",
"Rape" = "rape_per_100k",
"Robbery" = "rob_per_100k",
"Aggravated Assault" = "agg_ass_per_100k"),
selected = "rape_per_100k")),
mainPanel(
plotOutput("plot_crime")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
crime_filtered <- reactive(
dat %>% filter(department_name ==  input$department_name,
crime_type ==  input$crime_type,
year >= input$year_input[1] &
year <= input$year_input[2])
)
output$plot_crime <- renderPlot(
crime_filtered() %>%
ggplot(aes_(input$year_input,
input$crime_type,
input$department_name)) +
geom_line()+
labs(x = "Year", y = "Crime per 100k")
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
dat <- dat %>% filter(months_reported == 12)
sum(is.na(dat))
cities <- unique(dat$department_name)
years <- unique(dat$year)
depart <- head(cities)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Crime Data Visualizer (U.S.)",
windowTitle = "US Crime App"),
# Sidebar select year range
sidebarLayout(
sidebarPanel(
selectInput("department_name", "SELECT CITY",
choices = cities,
selected = depart,
multiple = FALSE),
br(),
sliderInput("year_input", "Year",
min = 1975, max = 2015,
value = c(1975, 2015),
sep = ""),
br(),
# select crime type
selectInput("crime_type",
"SELECT CRIME TYPE",
choices =  list("Homicide" = "homs_per_100k",
"Rape" = "rape_per_100k",
"Robbery" = "rob_per_100k",
"Aggravated Assault" = "agg_ass_per_100k"),
selected = "rape_per_100k")),
mainPanel(
plotOutput("plot_crime")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
crime_filtered <- reactive(
dat %>% filter(department_name ==  input$department_name,
year >= input$year_input[1] &
year <= input$year_input[2])
)
output$plot_crime <- renderPlot(
crime_filtered() %>% filter(crime_type == input$crime_type) %>%
ggplot(aes_(input$year_input,
input$crime_type,
input$department_name)) +
geom_line()+
labs(x = "Year", y = "Crime per 100k")
)
}
# Run the application
shinyApp(ui = ui, server = server)
cities <- unique(dat$department_name)
cities
years <- unique(dat$year)
years
runApp()
runApp()
runApp()
dat <- read.csv("../../data/ucr_crime_1975_2015.csv")
View(dat)
dat <- read.csv("../../data/ucr_crime_1975_2015.csv")
str(dat)
library(shiny)
tidy_data <- (dat %>%
gather( key = "crime_type", value = "count_per_100k", violent_per_100k, homs_per_100k, rape_per_100k, rob_per_100k, agg_ass_per_100k))
cities <- unique(tidy_data$department_name)
cities
years <- unique(tidy_data$year)
years
crime <- unique(tidy_data$count_per_100k)
crime
crime <- unique(tidy_data$crime_type)
crime
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
